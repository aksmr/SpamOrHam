{"version":3,"sources":["Components/Form.js","Components/Result.js","Components/Copyright.js","App.js","reportWebVitals.js","index.js"],"names":["styles","buttonResult","buttonClear","Form","props","type","placeholder","id","name","autoFocus","required","value","style","onClick","message","document","getElementById","undefined","axios","get","encodeURIComponent","then","res","data","catch","err","console","log","jsonRes","hookResult","result","fontSize","Result","printResult","prediction","toUpperCase","link","textDecoration","color","fontWeight","Copyright","href","Date","getFullYear","app","textAlign","fontFamily","background","App","useState","setResult","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"8MAEMA,EAAS,CACXC,aAAc,GAEdC,YAAa,IAIJC,EAAO,SAACC,GAyBjB,OACI,gCACI,uBAAOC,KAAK,OAAOC,YAAY,qBAAqBC,GAAG,UAAUC,KAAK,UAAUC,WAAS,EAACC,UAAQ,IAClG,uBAAOL,KAAK,SAASE,GAAG,eAAeC,KAAK,eAAeG,MAAM,SAASC,MAAOZ,EAAOC,aAAcY,QA3BzF,WACjB,IAAIC,EAAUC,SAASC,eAAe,WAAWL,WAElCM,IAAZH,GAAqC,KAAZA,EACxBI,IAAMC,IAAN,sBAAyBC,mBAAmBN,KAC3CO,MAAK,SAACC,GACH,OAAOA,EAAIC,QAEdC,OAAM,SAACC,GACJC,QAAQC,IAAIF,MAEfJ,MAAK,SAACO,GACHxB,EAAMyB,WAAWD,MAGrBxB,EAAMyB,WAAW,CAAC,WAAa,QAa/B,uBAAOxB,KAAK,SAASE,GAAG,cAAcC,KAAK,cAAcG,MAAM,QAAQC,MAAOZ,EAAOE,YAAaW,QATtF,WAChBT,EAAMyB,WAAW,CAAC,WAAa,KAC/Bd,SAASC,eAAe,WAAWL,MAAQ,UC/B7CX,EAAS,CACX8B,OAAQ,CACJC,SAAS,uBAIJC,EAAS,SAAC5B,GACnB,OACI,qBAAKG,GAAG,SAASC,KAAK,SAASI,MAAOZ,EAAO8B,OAA7C,cACsCb,IAAjCb,EAAM6B,YAAYC,YAA6D,KAAjC9B,EAAM6B,YAAYC,WAAhE,oBAAkG9B,EAAM6B,YAAYC,WAAWC,cAA/H,WCTPnC,EAAS,CACXoC,KAAM,CACFC,eAAgB,OAChBC,MAAM,QACNC,WAAW,SAINC,EAAY,WACrB,OACI,8BACI,kCAAO,mBAAGC,KAAK,2BAA2B7B,MAAOZ,EAAOoC,KAAjD,kBAAP,UAA0E,IAAIM,MAAOC,oBCN3F3C,EAAS,CACX4C,IAAK,CACDC,UAAW,SACXC,WAAW,8BACXf,SAAS,qBACTgB,WAAW,kFAINC,EAAM,WACf,MAA4BC,mBAAS,IAArC,mBAAOnB,EAAP,KAAeoB,EAAf,KAEH,OACC,sBAAKtC,MAAOZ,EAAO4C,IAAnB,UACC,6CACS,0IACA,uBAAM,uBACN,cAAC,EAAD,CAAMf,WAAYqB,IAClB,uBACA,cAAC,EAAD,CAAQjB,YAAaH,IACrB,uBAAM,uBACN,cAAC,EAAD,QCdGqB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBhC,MAAK,YAAkD,IAA/CiC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACR,cAAC,IAAMC,WAAP,UACC,cAAC,EAAD,MAED9C,SAASC,eAAe,SAMzBmC,M","file":"static/js/main.e1129230.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\nconst styles = {\r\n    buttonResult: {\r\n    },\r\n    buttonClear: {\r\n    },\r\n}\r\n\r\nexport const Form = (props) => {\r\n    const handleResult = () => {\r\n        let message = document.getElementById(\"message\").value;\r\n\r\n        if(message !== undefined && message !== \"\") {\r\n            axios.get(`/prediction/${encodeURIComponent(message)}`)\r\n            .then((res) => {\r\n                return res.data\r\n            })\r\n            .catch((err) => {\r\n                console.log(err)\r\n            })\r\n            .then((jsonRes) => {\r\n                props.hookResult(jsonRes)\r\n            })\r\n        } else {\r\n            props.hookResult({'prediction':''})\r\n        }\r\n    }\r\n\r\n    const handleClear = () => {\r\n        props.hookResult({'prediction':''})\r\n        document.getElementById(\"message\").value = \"\";\r\n    }\r\n\r\n    return(\r\n        <div>\r\n            <input type=\"text\" placeholder=\"Enter your text...\" id=\"message\" name=\"message\" autoFocus required />\r\n            <input type=\"button\" id=\"buttonResult\" name=\"buttonResult\" value=\"Result\" style={styles.buttonResult} onClick={handleResult} />\r\n            <input type=\"button\" id=\"buttonClear\" name=\"buttonClear\" value=\"Clear\" style={styles.buttonClear} onClick={handleClear} />\r\n        </div>\r\n    )\r\n}","const styles = {\r\n    result: {\r\n        fontSize: `calc(20px + 6vmin)`,\r\n    }\r\n}\r\n\r\nexport const Result = (props) => {\r\n    return(\r\n        <div id=\"result\" name=\"result\" style={styles.result}>\r\n            {props.printResult.prediction !== undefined && props.printResult.prediction !== \"\"  ? `This is a ${props.printResult.prediction.toUpperCase()}!` : ``}\r\n        </div>\r\n    )\r\n}","const styles = {\r\n    link: {\r\n        textDecoration: \"none\",\r\n        color:'black',\r\n        fontWeight:'bold',\r\n    }\r\n}\r\n\r\nexport const Copyright = () => {\r\n    return(\r\n        <div>\r\n            <small><a href=\"https://github.com/aksmr\" style={styles.link}>AK47</a> Â© {new Date().getFullYear()}</small>\r\n        </div>\r\n    )\r\n}","import {useState} from 'react';\nimport { Form } from './Components/Form';\nimport { Result } from './Components/Result';\nimport { Copyright } from './Components/Copyright';\n\nconst styles = {\n    app: {\n        textAlign: 'center',\n        fontFamily: `Shadows Into Light, cursive`,\n        fontSize: `calc(10px + 3vmin)`,\n        background: `linear-gradient(to right bottom, #f1e8b8, #caa791, #8e7071, #4d4349, #191919)`,\n        },\n}\n\nexport const App = () => {\n    const [result, setResult] = useState({})\n\n\treturn (\n\t\t<div style={styles.app}>\n\t\t\t<h1>Spam or Ham</h1>\n            <small>The application allows you to find out whether a previously entered text is considered spam or not...</small>\n            <br /><br />\n            <Form hookResult={setResult} />\n            <br />\n            <Result printResult={result} />\n            <br /><br />\n            <Copyright />\n\t\t</div>\n\t);\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {App} from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}